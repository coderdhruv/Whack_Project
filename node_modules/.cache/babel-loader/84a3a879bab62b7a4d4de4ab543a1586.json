{"ast":null,"code":"var _jsxFileName = \"/home/dhruv/Desktop/Walmart/WalmartProj/src/Graph.js\";\nimport * as React from 'react';\nimport { matchPath } from 'react-router';\nimport { db } from './config';\n\nclass Graph extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shelf_list1: {},\n      graph1: {},\n      nodes1: {},\n      shelf_num_from_coord1: {}\n    };\n  }\n\n  componentDidMount() {\n    var shelf_list = {};\n    var graph = {};\n    var nodes = {};\n    shelf_list[1] = [297, 322];\n    shelf_list[2] = [398, 322];\n    shelf_list[3] = [497, 321];\n    shelf_list[4] = [596, 322];\n    shelf_list[5] = [595, 42];\n    shelf_list[6] = [496, 41];\n    shelf_list[7] = [398, 41];\n    shelf_list[8] = [298, 41];\n    shelf_list[9] = [852, 321];\n    shelf_list[10] = [955, 322];\n    shelf_list[11] = [1058, 323];\n    shelf_list[12] = [1164, 323];\n    shelf_list[13] = [1152, 42];\n    shelf_list[14] = [1058, 41];\n    shelf_list[15] = [960, 42];\n    shelf_list[16] = [857, 42];\n    shelf_list[17] = [295, 602];\n    shelf_list[18] = [394, 601];\n    shelf_list[19] = [496, 601];\n    shelf_list[20] = [595, 603];\n    shelf_list[21] = [596, 322];\n    shelf_list[22] = [497, 321];\n    shelf_list[23] = [398, 322];\n    shelf_list[24] = [297, 323];\n    shelf_list[25] = [859, 601];\n    shelf_list[26] = [961, 601];\n    shelf_list[27] = [1061, 601];\n    shelf_list[28] = [1157, 602];\n    shelf_list[29] = [1164, 323];\n    shelf_list[30] = [1058, 323];\n    shelf_list[31] = [955, 322];\n    shelf_list[32] = [852, 321];\n    shelf_list[33] = [291, 882];\n    shelf_list[34] = [394, 881];\n    shelf_list[35] = [500, 883];\n    shelf_list[36] = [606, 880];\n    shelf_list[37] = [595, 603];\n    shelf_list[38] = [496, 601];\n    shelf_list[39] = [394, 601];\n    shelf_list[40] = [295, 602];\n    shelf_list[41] = [859, 882];\n    shelf_list[42] = [961, 883];\n    shelf_list[43] = [1057, 882];\n    shelf_list[44] = [1161, 881];\n    shelf_list[45] = [1157, 602];\n    shelf_list[46] = [1061, 601];\n    shelf_list[47] = [961, 601];\n    shelf_list[48] = [859, 601];\n    nodes[49] = [859, 601];\n    nodes[50] = [730, 881];\n    nodes[51] = [1310, 880];\n    nodes[52] = [1312, 602];\n    nodes[53] = [731, 601];\n    nodes[54] = [152, 602];\n    nodes[55] = [152, 321];\n    nodes[56] = [731, 321];\n    nodes[57] = [1312, 322];\n    nodes[58] = [1310, 41];\n    nodes[59] = [731, 42];\n    nodes[60] = [151, 42];\n    graph[1] = [297, 323];\n    graph[2] = [398, 322];\n    graph[3] = [497, 321];\n    graph[4] = [596, 322];\n    graph[5] = [595, 42];\n    graph[6] = [496, 41];\n    graph[7] = [398, 41];\n    graph[8] = [298, 41];\n    graph[9] = [852, 321];\n    graph[10] = [955, 322];\n    graph[11] = [1058, 323];\n    graph[12] = [1164, 323];\n    graph[13] = [1152, 42];\n    graph[14] = [1058, 41];\n    graph[15] = [960, 42];\n    graph[16] = [857, 42];\n    graph[17] = [295, 602];\n    graph[18] = [394, 601];\n    graph[19] = [496, 601];\n    graph[20] = [595, 603];\n    graph[21] = [596, 322];\n    graph[22] = [497, 321];\n    graph[23] = [398, 322];\n    graph[24] = [297, 323];\n    graph[25] = [859, 601];\n    graph[26] = [961, 601];\n    graph[27] = [1061, 601];\n    graph[28] = [1157, 602];\n    graph[29] = [1164, 323];\n    graph[30] = [1058, 323];\n    graph[31] = [955, 322];\n    graph[32] = [852, 321];\n    graph[33] = [291, 882];\n    graph[34] = [394, 881];\n    graph[35] = [500, 883];\n    graph[36] = [606, 880];\n    graph[37] = [595, 603];\n    graph[38] = [496, 601];\n    graph[39] = [394, 601];\n    graph[40] = [295, 602];\n    graph[41] = [859, 882];\n    graph[42] = [961, 883];\n    graph[43] = [1057, 882];\n    graph[44] = [1161, 881];\n    graph[45] = [1157, 602];\n    graph[46] = [1061, 601];\n    graph[47] = [961, 601];\n    graph[48] = [859, 601];\n    graph[49] = [150, 881];\n    graph[50] = [730, 881];\n    graph[51] = [1310, 880];\n    graph[52] = [1312, 602];\n    graph[53] = [731, 601];\n    graph[54] = [152, 602];\n    graph[55] = [152, 321];\n    graph[56] = [731, 321];\n    graph[57] = [1312, 322];\n    graph[58] = [1310, 41];\n    graph[59] = [731, 42];\n    graph[60] = [151, 42];\n    this.setState({\n      shelf_list1: shelf_list\n    });\n    this.setState({\n      nodes1: nodes\n    });\n    this.setState({\n      graph1: graph\n    });\n    var shelf_num_from_coord = {};\n\n    for (let key in shelf_list) {\n      shelf_num_from_coord[shelf_list[key]] = key;\n    }\n\n    this.setState({\n      shelf_num_from_coord1: shelf_num_from_coord\n    });\n    console.log(shelf_num_from_coord);\n    var dist_between_nodes = {};\n\n    for (var i = 1; i <= 60; i++) {\n      for (var j = 1; j <= 60; j++) {\n        var list3 = [i, j];\n        dist_between_nodes[list3] = this.dist_bet_nodes(graph[i], graph[j]);\n      }\n    } // for(var i=1;i<=60;i++){\n    //     for(var j=i+1;j<=60;j++){\n    //         var list3 = [i,j]\n    //         dist_between_nodes[list3] = this.dist_bet_nodes(graph[i],graph[j])\n    //     }\n    // }\n\n\n    console.log(dist_between_nodes);\n    var final_graph = {};\n    final_graph[1] = [2, 23, 24, 55];\n    final_graph[2] = [1, 23, 3, 24, 22];\n    final_graph[3] = [2, 23, 4, 21, 22];\n    final_graph[4] = [3, 22, 21, 56];\n    final_graph[5] = [6, 59];\n    final_graph[6] = [5, 7];\n    final_graph[7] = [6, 8];\n    final_graph[8] = [7, 60];\n    final_graph[9] = [56, 32, 10, 31];\n    final_graph[10] = [9, 32, 11, 30, 31];\n    final_graph[11] = [10, 31, 12, 29, 30];\n    final_graph[12] = [11, 30, 29, 57];\n    final_graph[13] = [14, 58];\n    final_graph[14] = [13, 15];\n    final_graph[15] = [14, 16];\n    final_graph[16] = [59, 15];\n    final_graph[17] = [18, 39, 40, 54];\n    final_graph[18] = [17, 40, 19, 38, 39];\n    final_graph[19] = [18, 39, 20, 37, 38];\n    final_graph[20] = [19, 38, 37, 53];\n    final_graph[21] = [3, 22, 56, 4];\n    final_graph[22] = [2, 23, 4, 21, 3];\n    final_graph[23] = [1, 24, 3, 22, 2];\n    final_graph[24] = [2, 23, 1, 55];\n    final_graph[25] = [26, 47, 48, 53];\n    final_graph[26] = [25, 48, 27, 46, 47];\n    final_graph[27] = [26, 47, 28, 45, 46];\n    final_graph[28] = [27, 46, 45, 52];\n    final_graph[29] = [11, 30, 12, 57];\n    final_graph[30] = [10, 31, 12, 29, 11];\n    final_graph[31] = [9, 32, 11, 30, 10];\n    final_graph[32] = [10, 31, 9, 56];\n    final_graph[33] = [49, 34];\n    final_graph[34] = [33, 35];\n    final_graph[35] = [34, 36];\n    final_graph[36] = [35, 50];\n    final_graph[37] = [19, 38, 20, 53];\n    final_graph[38] = [18, 39, 20, 37, 19];\n    final_graph[39] = [17, 40, 19, 38, 18];\n    final_graph[40] = [17, 40, 19, 38, 18];\n    final_graph[41] = [50, 42];\n    final_graph[42] = [41, 43];\n    final_graph[43] = [42, 44];\n    final_graph[44] = [43, 51];\n    final_graph[45] = [27, 46, 28, 52];\n    final_graph[46] = [26, 47, 28, 45, 27];\n    final_graph[47] = [25, 48, 27, 46, 26];\n    final_graph[48] = [26, 47, 25, 53];\n    final_graph[49] = [33, 54];\n    final_graph[50] = [36, 41, 53];\n    final_graph[51] = [44, 52];\n    final_graph[52] = [51, 57, 28, 45];\n    final_graph[53] = [20, 37, 25, 48, 56, 50];\n    final_graph[54] = [49, 55, 17, 40];\n    final_graph[55] = [54, 60, 1, 24];\n    final_graph[56] = [4, 21, 9, 32, 59];\n    final_graph[57] = [12, 29, 58, 52];\n    final_graph[58] = [13, 57];\n    final_graph[59] = [5, 16, 56];\n    final_graph[60] = [8, 55];\n    console.log(final_graph[1][0]);\n    var e = [];\n    var duplicates = {};\n    duplicates[1] = 24;\n    duplicates[24] = 1;\n    duplicates[2] = 23;\n    duplicates[23] = 2;\n    duplicates[3] = 22;\n    duplicates[22] = 3;\n    duplicates[4] = 21;\n    duplicates[21] = 4;\n    duplicates[9] = 32;\n    duplicates[32] = 9;\n    duplicates[10] = 31;\n    duplicates[31] = 10;\n    duplicates[11] = 30;\n    duplicates[30] = 11;\n    duplicates[12] = 29;\n    duplicates[29] = 12;\n    duplicates[17] = 40;\n    duplicates[40] = 17;\n    duplicates[18] = 39;\n    duplicates[39] = 18;\n    duplicates[19] = 38;\n    duplicates[38] = 19;\n    duplicates[20] = 37;\n    duplicates[37] = 20;\n    duplicates[25] = 48;\n    duplicates[48] = 25;\n    duplicates[26] = 47;\n    duplicates[47] = 26;\n    duplicates[27] = 46;\n    duplicates[46] = 27;\n    duplicates[28] = 45;\n    duplicates[45] = 28;\n\n    for (var i = 1; i <= 60; i++) {\n      var list1 = [];\n\n      for (var k = 1; k <= 60; k++) {\n        var flag = 0;\n\n        for (var j = 0; j < final_graph[i].length; j++) {\n          if (final_graph[i][j] == k) {\n            flag = 1;\n            break;\n          }\n        }\n\n        if (flag == 1) {\n          list1.push(dist_between_nodes[[i, k]]);\n        } else {\n          list1.push(Infinity);\n        }\n      }\n\n      e.push(list1);\n    }\n\n    console.log(e);\n    var shortestPathInfo = this.shortestPath(e, 60, 1);\n    var path1to6 = this.constructPath(shortestPathInfo, 6);\n    console.log(path1to6);\n  }\n\n  dist_bet_nodes(x, y) {\n    // return Math.sqrt((((Math.abs(x[0]-y[0])*(Math.abs(x[1]-y[1])) + (Math.abs(x[1]-y[1])*(Math.abs(x[1]-y[1])))))));\n    return Math.abs(x[0] - y[0]) + Math.abs(x[1] - y[1]);\n  }\n\n  shortestPath(edges, numVertices, startVertex) {\n    var done = new Array(numVertices);\n    done[startVertex] = true;\n    var pathLengths = new Array(numVertices);\n    var predecessors = new Array(numVertices);\n\n    for (var i = 0; i < numVertices; i++) {\n      pathLengths[i] = edges[startVertex][i];\n\n      if (edges[startVertex][i] != Infinity) {\n        predecessors[i] = startVertex;\n      }\n    }\n\n    pathLengths[startVertex] = 0;\n\n    for (var i = 0; i < numVertices - 1; i++) {\n      var closest = -1;\n      var closestDistance = Infinity;\n\n      for (var j = 0; j < numVertices; j++) {\n        if (!done[j] && pathLengths[j] < closestDistance) {\n          closestDistance = pathLengths[j];\n          closest = j;\n        }\n      }\n\n      done[closest] = true;\n\n      for (var j = 0; j < numVertices; j++) {\n        if (!done[j]) {\n          var possiblyCloserDistance = pathLengths[closest] + edges[closest][j];\n\n          if (possiblyCloserDistance < pathLengths[j]) {\n            pathLengths[j] = possiblyCloserDistance;\n            predecessors[j] = closest;\n          }\n        }\n      }\n    }\n\n    return {\n      \"startVertex\": startVertex,\n      \"pathLengths\": pathLengths,\n      \"predecessors\": predecessors\n    };\n  }\n\n  constructPath(shortestPathInfo, endVertex) {\n    var path = [];\n\n    while (endVertex != shortestPathInfo.startVertex) {\n      path.unshift(endVertex);\n      endVertex = shortestPathInfo.predecessors[endVertex];\n    }\n\n    return path;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 13\n      }\n    });\n  }\n\n}\n\nexport default Graph;","map":{"version":3,"sources":["/home/dhruv/Desktop/Walmart/WalmartProj/src/Graph.js"],"names":["React","matchPath","db","Graph","Component","constructor","props","state","shelf_list1","graph1","nodes1","shelf_num_from_coord1","componentDidMount","shelf_list","graph","nodes","setState","shelf_num_from_coord","key","console","log","dist_between_nodes","i","j","list3","dist_bet_nodes","final_graph","e","duplicates","list1","k","flag","length","push","Infinity","shortestPathInfo","shortestPath","path1to6","constructPath","x","y","Math","abs","edges","numVertices","startVertex","done","Array","pathLengths","predecessors","closest","closestDistance","possiblyCloserDistance","endVertex","path","unshift","render"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { matchPath } from 'react-router';\nimport {db} from './config';\n\nclass Graph extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            shelf_list1 : {},\n            graph1 : {},\n            nodes1 : {},\n            shelf_num_from_coord1 : {}\n        };\n    }\n    componentDidMount(){\n        var shelf_list = {}\n        var graph = {}\n        var nodes = {}\n        shelf_list[1] = [297,322]\n        shelf_list[2] = [ 398, 322 ]\n        shelf_list[3] = [ 497, 321 ]\n        shelf_list[4] = [ 596, 322 ]\n        shelf_list[5] = [ 595, 42 ]\n        shelf_list[6] = [ 496, 41 ]\n        shelf_list[7] = [ 398, 41 ]\n        shelf_list[8] = [ 298, 41 ]\n        shelf_list[9] = [ 852, 321 ]\n        shelf_list[10] = [ 955, 322 ]\n        shelf_list[11] = [ 1058, 323 ]\n        shelf_list[12] = [ 1164, 323 ]\n        shelf_list[13] = [ 1152, 42 ]\n        shelf_list[14] = [ 1058, 41 ]\n        shelf_list[15] = [ 960, 42 ]\n        shelf_list[16] = [ 857, 42 ]\n        shelf_list[17] = [ 295, 602 ]\n        shelf_list[18] = [ 394, 601 ]\n        shelf_list[19] = [ 496, 601 ]\n        shelf_list[20] = [ 595, 603 ]\n        shelf_list[21] = [ 596, 322 ]\n        shelf_list[22] = [ 497, 321 ]\n        shelf_list[23] = [ 398, 322 ]\n        shelf_list[24] = [ 297, 323 ]\n        shelf_list[25] = [ 859, 601 ]\n        shelf_list[26] = [ 961, 601 ]\n        shelf_list[27] = [ 1061, 601 ]\n        shelf_list[28] = [ 1157, 602 ]\n        shelf_list[29] = [ 1164, 323 ]\n        shelf_list[30] = [ 1058, 323 ]\n        shelf_list[31] = [ 955, 322 ]\n        shelf_list[32] = [ 852, 321 ]\n        shelf_list[33] = [ 291, 882 ]\n        shelf_list[34] = [ 394, 881 ]\n        shelf_list[35] = [ 500, 883 ]\n        shelf_list[36] = [ 606, 880 ]\n        shelf_list[37] = [ 595, 603 ]\n        shelf_list[38] = [ 496, 601 ]\n        shelf_list[39] = [ 394, 601 ]\n        shelf_list[40] = [ 295, 602 ]\n        shelf_list[41] = [ 859, 882 ]\n        shelf_list[42] = [ 961, 883 ]\n        shelf_list[43] = [ 1057, 882 ]\n        shelf_list[44] = [ 1161, 881 ]\n        shelf_list[45] = [ 1157, 602 ]\n        shelf_list[46] = [ 1061, 601 ]\n        shelf_list[47] = [ 961, 601 ]\n        shelf_list[48] = [ 859, 601 ]\n        nodes[49] = [ 859, 601 ]\n        nodes[50] = [ 730, 881 ]\n        nodes[51] = [ 1310, 880 ]\n        nodes[52] = [ 1312, 602 ]\n        nodes[53] = [ 731, 601 ]\n        nodes[54] = [ 152, 602 ]\n        nodes[55] = [ 152, 321 ]\n        nodes[56] = [ 731, 321 ]\n        nodes[57] = [ 1312, 322 ]\n        nodes[58] = [ 1310, 41 ]\n        nodes[59] = [ 731, 42 ]\n        nodes[60] = [ 151, 42 ] \n        graph[1] = [297,323]\n        graph[2] = [ 398, 322 ]\n        graph[3] = [ 497, 321 ]\n        graph[4] = [ 596, 322 ]\n        graph[5] = [ 595, 42 ]\n        graph[6] = [ 496, 41 ]\n        graph[7] = [ 398, 41 ]\n        graph[8] = [ 298, 41 ]\n        graph[9] = [ 852, 321 ]\n        graph[10] = [ 955, 322 ]\n        graph[11] = [ 1058, 323 ]\n        graph[12] = [ 1164, 323 ]\n        graph[13] = [ 1152, 42 ]\n        graph[14] = [ 1058, 41 ]\n        graph[15] = [ 960, 42 ]\n        graph[16] = [ 857, 42 ]\n        graph[17] = [ 295, 602 ]\n        graph[18] = [ 394, 601 ]\n        graph[19] = [ 496, 601 ]\n        graph[20] = [ 595, 603 ]\n        graph[21] = [ 596, 322 ]\n        graph[22] = [ 497, 321 ]\n        graph[23] = [ 398, 322 ]\n        graph[24] = [ 297, 323 ]\n        graph[25] = [ 859, 601 ]\n        graph[26] = [ 961, 601 ]\n        graph[27] = [ 1061, 601 ]\n        graph[28] = [ 1157, 602 ]\n        graph[29] = [ 1164, 323 ]\n        graph[30] = [ 1058, 323 ]\n        graph[31] = [ 955, 322 ]\n        graph[32] = [ 852, 321 ]\n        graph[33] = [ 291, 882 ]\n        graph[34] = [ 394, 881 ]\n        graph[35] = [ 500, 883 ]\n        graph[36] = [ 606, 880 ]\n        graph[37] = [ 595, 603 ]\n        graph[38] = [ 496, 601 ]\n        graph[39] = [ 394, 601 ]\n        graph[40] = [ 295, 602 ]\n        graph[41] = [ 859, 882 ]\n        graph[42] = [ 961, 883 ]\n        graph[43] = [ 1057, 882 ]\n        graph[44] = [ 1161, 881 ]\n        graph[45] = [ 1157, 602 ]\n        graph[46] = [ 1061, 601 ]\n        graph[47] = [ 961, 601 ]\n        graph[48] = [ 859, 601 ]\n        graph[49] = [ 150, 881 ]\n        graph[50] = [ 730, 881 ]\n        graph[51] = [ 1310, 880 ]\n        graph[52] = [ 1312, 602 ]\n        graph[53] = [ 731, 601 ]\n        graph[54] = [ 152, 602 ]\n        graph[55] = [ 152, 321 ]\n        graph[56] = [ 731, 321 ]\n        graph[57] = [ 1312, 322 ]\n        graph[58] = [ 1310, 41 ]\n        graph[59] = [ 731, 42 ]\n        graph[60] = [ 151, 42 ] \n        this.setState({\n            shelf_list1 : shelf_list\n        })\n        this.setState({\n            nodes1 : nodes\n        })\n        this.setState({\n            graph1 : graph\n        })\n        var shelf_num_from_coord = {}\n        for(let key in shelf_list){\n            shelf_num_from_coord[shelf_list[key]] = key\n        }\n        this.setState({\n            shelf_num_from_coord1 : shelf_num_from_coord\n        })\n        console.log(shelf_num_from_coord)\n        var dist_between_nodes = {}\n        for(var i=1;i<=60;i++){\n            for(var j=1;j<=60;j++){\n                var list3 = [i,j]\n                dist_between_nodes[list3] = this.dist_bet_nodes(graph[i],graph[j])\n            }\n        }\n        // for(var i=1;i<=60;i++){\n        //     for(var j=i+1;j<=60;j++){\n        //         var list3 = [i,j]\n        //         dist_between_nodes[list3] = this.dist_bet_nodes(graph[i],graph[j])\n        //     }\n        // }\n        console.log(dist_between_nodes)\n        var final_graph = {}\n        final_graph[1] = [2,23,24,55]\n        final_graph[2] = [1,23,3,24,22]\n        final_graph[3] = [2,23,4,21,22]\n        final_graph[4] = [3,22,21,56]\n        final_graph[5] = [6,59]\n        final_graph[6] = [5,7]\n        final_graph[7] = [6,8]\n        final_graph[8] = [7,60]\n        final_graph[9] = [56,32,10,31]\n        final_graph[10] = [9,32,11,30,31]\n        final_graph[11] = [10,31,12,29,30]\n        final_graph[12] = [11,30,29,57]\n        final_graph[13] = [14,58]\n        final_graph[14] = [13,15]\n        final_graph[15] = [14,16]\n        final_graph[16] = [59,15]\n        final_graph[17] = [18,39,40,54]\n        final_graph[18] = [17,40,19,38,39]\n        final_graph[19] = [18,39,20,37,38]\n        final_graph[20] = [19,38,37,53]\n        final_graph[21] = [3,22,56,4]\n        final_graph[22] = [2,23,4,21,3]\n        final_graph[23] = [1,24,3,22,2]\n        final_graph[24] = [2,23,1,55]\n        final_graph[25] = [26,47,48,53]\n        final_graph[26] = [25,48,27,46,47]\n        final_graph[27] = [26,47,28,45,46]\n        final_graph[28] = [27,46,45,52]\n        final_graph[29] = [11,30,12,57]\n        final_graph[30] = [10,31,12,29,11]\n        final_graph[31] = [9,32,11,30,10]\n        final_graph[32] = [10,31,9,56]\n        final_graph[33] = [49,34]\n        final_graph[34] = [33,35]\n        final_graph[35] = [34,36]\n        final_graph[36] = [35,50]\n        final_graph[37] = [19,38,20,53]\n        final_graph[38] = [18,39,20,37,19]\n        final_graph[39] = [17,40,19,38,18]\n        final_graph[40] = [17,40,19,38,18]\n        final_graph[41] = [50,42]\n        final_graph[42] = [41,43]\n        final_graph[43] = [42,44]\n        final_graph[44] = [43,51]\n        final_graph[45] = [27,46,28,52]\n        final_graph[46] = [26,47,28,45,27]\n        final_graph[47] = [25,48,27,46,26]\n        final_graph[48] = [26,47,25,53]\n        final_graph[49] = [33,54]\n        final_graph[50] = [36,41,53]\n        final_graph[51] = [44,52]\n        final_graph[52] = [51,57,28,45]\n        final_graph[53] = [20,37,25,48,56,50]\n        final_graph[54] = [49,55,17,40]\n        final_graph[55] = [54,60,1,24]\n        final_graph[56] = [4,21,9,32,59]\n        final_graph[57] = [12,29,58,52]\n        final_graph[58] = [13,57]\n        final_graph[59] = [5,16,56]\n        final_graph[60] = [8,55]\n        console.log(final_graph[1][0])\n        var e = []\n        var duplicates = {}\n        duplicates[1] = 24\n        duplicates[24] = 1\n        duplicates[2] = 23\n        duplicates[23] = 2\n        duplicates[3] = 22\n        duplicates[22] = 3\n        duplicates[4] = 21\n        duplicates[21] = 4\n        duplicates[9] = 32\n        duplicates[32] = 9\n        duplicates[10] = 31\n        duplicates[31] = 10\n        duplicates[11] = 30\n        duplicates[30] = 11\n        duplicates[12] = 29\n        duplicates[29] = 12\n        duplicates[17] = 40\n        duplicates[40] = 17\n        duplicates[18] = 39\n        duplicates[39] = 18\n        duplicates[19] = 38\n        duplicates[38] = 19\n        duplicates[20] = 37\n        duplicates[37] = 20\n        duplicates[25] = 48\n        duplicates[48] = 25\n        duplicates[26] = 47\n        duplicates[47] = 26\n        duplicates[27] = 46\n        duplicates[46] = 27\n        duplicates[28] = 45\n        duplicates[45] = 28\n        \n        for(var i = 1 ; i <= 60 ; i++){            \n            var list1 = []\n            for(var k=1 ; k <= 60 ; k++){\n                var flag = 0;\n                for(var j=0;j<final_graph[i].length;j++){\n                    if(final_graph[i][j] == k){\n                        flag = 1;\n                        break;\n                    }\n                }\n                if(flag == 1){\n                   list1.push(dist_between_nodes[[i,k]]) \n                }\n                else{\n                    list1.push(Infinity)\n                }\n            }\n            e.push(list1)\n        }\n        console.log(e)\n        var shortestPathInfo = this.shortestPath(e, 60, 1);\n        var path1to6 = this.constructPath(shortestPathInfo, 6);\n        console.log(path1to6)\n    }\n    dist_bet_nodes(x,y){\n        // return Math.sqrt((((Math.abs(x[0]-y[0])*(Math.abs(x[1]-y[1])) + (Math.abs(x[1]-y[1])*(Math.abs(x[1]-y[1])))))));\n        return Math.abs(x[0]-y[0]) + Math.abs(x[1]-y[1])\n    }\n    shortestPath(edges, numVertices, startVertex) {\n        var done = new Array(numVertices);\n        done[startVertex] = true;\n        var pathLengths = new Array(numVertices);\n        var predecessors = new Array(numVertices);\n        for (var i = 0; i < numVertices; i++) {\n          pathLengths[i] = edges[startVertex][i];\n          if (edges[startVertex][i] != Infinity) {\n            predecessors[i] = startVertex;\n          }\n        }\n        pathLengths[startVertex] = 0;\n        for (var i = 0; i < numVertices - 1; i++) {\n          var closest = -1;\n          var closestDistance = Infinity;\n          for (var j = 0; j < numVertices; j++) {\n            if (!done[j] && pathLengths[j] < closestDistance) {\n              closestDistance = pathLengths[j];\n              closest = j;\n            }\n          }\n          done[closest] = true;\n          for (var j = 0; j < numVertices; j++) {\n            if (!done[j]) {\n              var possiblyCloserDistance = pathLengths[closest] + edges[closest][j];\n              if (possiblyCloserDistance < pathLengths[j]) {\n                pathLengths[j] = possiblyCloserDistance;\n                predecessors[j] = closest;\n              }\n            }\n          }\n        }\n        return { \"startVertex\": startVertex,\n                 \"pathLengths\": pathLengths,\n                 \"predecessors\": predecessors };\n      }\n      constructPath(shortestPathInfo, endVertex) {\n        var path = [];\n        while (endVertex != shortestPathInfo.startVertex) {\n          path.unshift(endVertex);\n          endVertex = shortestPathInfo.predecessors[endVertex];\n        }\n        return path;\n      }\n    render(){\n        return(\n            <div></div>\n        );\n    }\n}\n\nexport default Graph"]},"metadata":{},"sourceType":"module"}